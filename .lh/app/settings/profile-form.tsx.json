{
    "sourceFile": "app/settings/profile-form.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1698794774891,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1698794844538,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,18 +15,18 @@\n   FormItem,\n   FormLabel,\n   FormMessage,\n } from \"@/components/ui/form\"\n-import { Input } from \"@/registry/new-york/ui/input\"\n import {\n   Select,\n   SelectContent,\n   SelectItem,\n   SelectTrigger,\n   SelectValue,\n } from \"@/registry/new-york/ui/select\"\n import { Textarea } from \"@/registry/new-york/ui/textarea\"\n-import { toast } from \"@/registry/new-york/ui/use-toast\"\n+import { Input } from \"@/components/ui/input\"\n+import { toast } from \"@/components/ui/use-toast\"\n \n const profileFormSchema = z.object({\n   username: z\n     .string()\n"
                },
                {
                    "date": 1698794889956,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n   SelectContent,\n   SelectItem,\n   SelectTrigger,\n   SelectValue,\n-} from \"@/registry/new-york/ui/select\"\n+} from \" @/components/ui/select\"\n import { Textarea } from \"@/registry/new-york/ui/textarea\"\n import { Input } from \"@/components/ui/input\"\n import { toast } from \"@/components/ui/use-toast\"\n \n"
                },
                {
                    "date": 1698794909950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n   SelectItem,\n   SelectTrigger,\n   SelectValue,\n } from \"@/components/ui/select\"\n-import { Textarea } from \"@/registry/new-york/ui/textarea\"\n+import { Textarea } from \"@/components/ui/textarea\"\n import { Input } from \"@/components/ui/input\"\n import { toast } from \"@/components/ui/use-toast\"\n \n const profileFormSchema = z.object({\n"
                },
                {
                    "date": 1698795055472,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n import { useFieldArray, useForm } from \"react-hook-form\"\n import * as z from \"zod\"\n \n import { cn } from \"@/lib/utils\"\n-import { Button } from \"@/registry/new-york/ui/button\"\n+import { Button } from \"@/components/ui/button\"\n import {\n   Form,\n   FormControl,\n   FormDescription,\n"
                }
            ],
            "date": 1698794774891,
            "name": "Commit-0",
            "content": "\"use client\"\n\nimport Link from \"next/link\"\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { useFieldArray, useForm } from \"react-hook-form\"\nimport * as z from \"zod\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/registry/new-york/ui/button\"\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\"\nimport { Input } from \"@/registry/new-york/ui/input\"\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/registry/new-york/ui/select\"\nimport { Textarea } from \"@/registry/new-york/ui/textarea\"\nimport { toast } from \"@/registry/new-york/ui/use-toast\"\n\nconst profileFormSchema = z.object({\n  username: z\n    .string()\n    .min(2, {\n      message: \"Username must be at least 2 characters.\",\n    })\n    .max(30, {\n      message: \"Username must not be longer than 30 characters.\",\n    }),\n  email: z\n    .string({\n      required_error: \"Please select an email to display.\",\n    })\n    .email(),\n  bio: z.string().max(160).min(4),\n  urls: z\n    .array(\n      z.object({\n        value: z.string().url({ message: \"Please enter a valid URL.\" }),\n      })\n    )\n    .optional(),\n})\n\ntype ProfileFormValues = z.infer<typeof profileFormSchema>\n\n// This can come from your database or API.\nconst defaultValues: Partial<ProfileFormValues> = {\n  bio: \"I own a computer.\",\n  urls: [\n    { value: \"https://shadcn.com\" },\n    { value: \"http://twitter.com/shadcn\" },\n  ],\n}\n\nexport function ProfileForm() {\n  const form = useForm<ProfileFormValues>({\n    resolver: zodResolver(profileFormSchema),\n    defaultValues,\n    mode: \"onChange\",\n  })\n\n  const { fields, append } = useFieldArray({\n    name: \"urls\",\n    control: form.control,\n  })\n\n  function onSubmit(data: ProfileFormValues) {\n    toast({\n      title: \"You submitted the following values:\",\n      description: (\n        <pre className=\"mt-2 w-[340px] rounded-md bg-slate-950 p-4\">\n          <code className=\"text-white\">{JSON.stringify(data, null, 2)}</code>\n        </pre>\n      ),\n    })\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n        <FormField\n          control={form.control}\n          name=\"username\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Username</FormLabel>\n              <FormControl>\n                <Input placeholder=\"shadcn\" {...field} />\n              </FormControl>\n              <FormDescription>\n                This is your public display name. It can be your real name or a\n                pseudonym. You can only change this once every 30 days.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"email\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Email</FormLabel>\n              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                <FormControl>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select a verified email to display\" />\n                  </SelectTrigger>\n                </FormControl>\n                <SelectContent>\n                  <SelectItem value=\"m@example.com\">m@example.com</SelectItem>\n                  <SelectItem value=\"m@google.com\">m@google.com</SelectItem>\n                  <SelectItem value=\"m@support.com\">m@support.com</SelectItem>\n                </SelectContent>\n              </Select>\n              <FormDescription>\n                You can manage verified email addresses in your{\" \"}\n                <Link href=\"/examples/forms\">email settings</Link>.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"bio\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Bio</FormLabel>\n              <FormControl>\n                <Textarea\n                  placeholder=\"Tell us a little bit about yourself\"\n                  className=\"resize-none\"\n                  {...field}\n                />\n              </FormControl>\n              <FormDescription>\n                You can <span>@mention</span> other users and organizations to\n                link to them.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <div>\n          {fields.map((field, index) => (\n            <FormField\n              control={form.control}\n              key={field.id}\n              name={`urls.${index}.value`}\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className={cn(index !== 0 && \"sr-only\")}>\n                    URLs\n                  </FormLabel>\n                  <FormDescription className={cn(index !== 0 && \"sr-only\")}>\n                    Add links to your website, blog, or social media profiles.\n                  </FormDescription>\n                  <FormControl>\n                    <Input {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          ))}\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            size=\"sm\"\n            className=\"mt-2\"\n            onClick={() => append({ value: \"\" })}\n          >\n            Add URL\n          </Button>\n        </div>\n        <Button type=\"submit\">Update profile</Button>\n      </form>\n    </Form>\n  )\n}\n"
        }
    ]
}